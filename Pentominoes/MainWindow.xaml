<Window x:Class="PendleCodeMonkey.Pentominoes.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PendleCodeMonkey.Pentominoes"
        mc:Ignorable="d"
        Title="Pentomino Solver" Height="800" Width="860" Loaded="Window_Loaded" Closing="Window_Closing">
    <Window.Resources>
        <ControlTemplate x:Key="ValidationTemplate">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                    <Grid Width="14" Height="14">
                        <Ellipse Width="14" Height="14" 
                            Fill="Red" HorizontalAlignment="Center" 
                            VerticalAlignment="Center">
                        </Ellipse>
                        <TextBlock Foreground="White" FontWeight="Heavy" 
                            FontSize="8" HorizontalAlignment="Center" 
                            VerticalAlignment="Center" TextAlignment="Center"
                           ToolTip="{Binding ElementName=ErrorAdorner, 
                           Path=AdornedElement.(Validation.Errors)/ErrorContent}"
                       >!</TextBlock>
                    </Grid>
                </StackPanel>
                <AdornedElementPlaceholder x:Name="ErrorAdorner" ></AdornedElementPlaceholder>
            </DockPanel>
        </ControlTemplate>

        <Style x:Key="TextBoxInError" TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                              Value="{Binding RelativeSource={RelativeSource Self},
                              Path=(Validation.Errors)/ErrorContent}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:MainWindow.PreviousPuzzleCmd}"
                    Executed="PreviousPuzzleCmdExecuted"
                    CanExecute="PreviousPuzzleCanExecute"/>
        <CommandBinding Command="{x:Static local:MainWindow.NextPuzzleCmd}"
                    Executed="NextPuzzleCmdExecuted"
                    CanExecute="NextPuzzleCanExecute"/>
        <CommandBinding Command="{x:Static local:MainWindow.PreviousSolutionCmd}"
                    Executed="PreviousSolutionCmdExecuted"
                    CanExecute="PreviousSolutionCanExecute"/>
        <CommandBinding Command="{x:Static local:MainWindow.NextSolutionCmd}"
                    Executed="NextSolutionCmdExecuted"
                    CanExecute="NextSolutionCanExecute"/>
        <CommandBinding Command="{x:Static local:MainWindow.SolveCmd}"
                    Executed="SolveCmdExecuted"
                    CanExecute="SolveCanExecute"/>
        <CommandBinding Command="{x:Static local:MainWindow.AbortCmd}"
                    Executed="AbortCmdExecuted"
                    CanExecute="AbortCanExecute"/>
    </Window.CommandBindings>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="8"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
            <ColumnDefinition Width="8"></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="2"></RowDefinition>
        </Grid.RowDefinitions>

        <Viewbox Grid.Column="1" Grid.Row="1" Stretch="Uniform" StretchDirection="Both" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <UniformGrid x:Name="board" Width="200" Height="200" Rows="8" Columns="8" Margin="4" SnapsToDevicePixels="True"/>
        </Viewbox>
        <DockPanel Grid.Column="1" Grid.Row="0" Margin="0,8,0,0">
            <StackPanel DockPanel.Dock="Left" Orientation="Horizontal" Background="Silver">
                <Button x:Name="PreviousPageButton" FontWeight="Bold" Content="&lt;" Command="{x:Static local:MainWindow.PreviousPuzzleCmd}"/>
                <TextBlock x:Name="PageTextBlock" Margin="4" TextWrapping="NoWrap" FontWeight="Bold" Text="" Width="180" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Button x:Name="NextPageButton" FontWeight="Bold" Content="&gt;" Command="{x:Static local:MainWindow.NextPuzzleCmd}"/>
            </StackPanel>
            <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" Background="Silver">
                <Button x:Name="PreviousSolutionButton" FontWeight="Bold" Content="&lt;" Command="{x:Static local:MainWindow.PreviousSolutionCmd}"/>
                <TextBlock x:Name="SolutionTextBlock" Margin="4" TextWrapping="NoWrap" FontWeight="Bold" Text="" Width="180" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Button x:Name="NextSolutionButton" FontWeight="Bold" Content="&gt;" Command="{x:Static local:MainWindow.NextSolutionCmd}"/>
            </StackPanel>
            <StackPanel Background="Silver" Orientation="Horizontal" Margin="8,0,8,0">
                <CheckBox x:Name="ShowAlphaLabelsCheckBox" Content="Alpha Labels" VerticalAlignment="Center" Margin="8,0,0,0" Checked="ShowAlphaLabelsCheckBox_Checked" Unchecked="ShowAlphaLabelsCheckBox_Unchecked"/>
                <CheckBox x:Name="MaxSolutionsCheckBox" Content="Max. Solutions:" VerticalAlignment="Center" Margin="16,0,0,0"/>
                <TextBox x:Name="MaxSolutionsTextBox" Margin="8,0,0,0" HorizontalAlignment="Left" TextWrapping="Wrap" VerticalAlignment="Center"
                                 IsEnabled="{Binding ElementName=MaxSolutionsCheckBox, Path=IsChecked}"
                                 Style="{StaticResource TextBoxInError}" Width="64">
                    <TextBox.Text>
                        <Binding Path="MaxSolutions"
                                    UpdateSourceTrigger="PropertyChanged" >
                            <Binding.ValidationRules>
                                <local:IntegerRangeRule Min="1" Max="1000000"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Button Content="SOLVE" Background="LightGreen" HorizontalAlignment="Left" Margin="24,2,0,2" Padding="16,2,16,2" FontWeight="Bold" VerticalAlignment="Center" Command="{x:Static local:MainWindow.SolveCmd}"/>
            </StackPanel>
        </DockPanel>

        <StatusBar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="220" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem x:Name="StatusTextBarItem">
                <TextBlock x:Name="StatusTextBlock" HorizontalAlignment="Stretch" FontWeight="Bold" TextWrapping="NoWrap" Text="Ready" VerticalAlignment="Center"/>
            </StatusBarItem>
            <Separator Grid.Column="1"/>
            <StatusBarItem Grid.Column="2">
                <Button x:Name="AbortButton" Content="Abort" Margin="1" Padding="8,0,8,0" Command="{x:Static local:MainWindow.AbortCmd}"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="3">
                <ProgressBar x:Name="progress" HorizontalAlignment="Left" Height="16" Width="210" Minimum="0" Maximum="100" IsIndeterminate="False"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
